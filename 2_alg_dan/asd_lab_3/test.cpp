#include "catch.hpp"
#include "realty.h"
#include "realty2.h"

TEST_CASE("Проверка работы методов класса realty", "[realty]")
{
    // -- тестовые методы --
    SECTION("Тестироавние инициализации класса realty")
    {
        realty zero;
        CHECK(zero.toString() == "Контора: \nДата создания: \nНет Информации");

        std::string s = "Контора: Neil\nДата создания: 01012001\n";
        s += " идентификационный номер : 12345678\n";
        s += " количество комнат : 1\n";
        s += " общая площадь : 100.000000\n";
        s += " жилая площадь : 50.000000\n";
        s += " дата постройки дома : 10102010\n";
        s += " запрашиваемая стоимость : 100000.000000\n";
        s += " телефон продавца : 89996014435\n\n";

        realty r1("01012001", "Neil", {value_type(12345678, 1, 100, 50, "10102010", 100000, "89996014435")});
        CHECK(r1.toString() == s);

        array a {value_type(12345678, 1, 100, 50, "10102010", 100000, "89996014435")};
        realty r2("01012001", "Neil", a);
        CHECK(r2.toString() == s);

        CHECK_THROWS
        ( [&]() {
            realty2 r3("010120010", "Neil", {value_type(12345678, 1, 100, 50, "10102010", 100000, "89996014435")});
        } () );CHECK_THROWS
        ( [&]() {
            realty2 r4("01012001", "Neil", {value_type(123456789, 1, 100, 50, "10102010", 100000, "89996014435")});
        } () );
        CHECK_THROWS
        ( [&]() {
            realty2 r5("01012001", "Neil", {value_type(12345678, 1, 100, 50, "10102010045", 100000, "89996014435")});
        } () );
        CHECK_THROWS
        ( [&]() {
            realty2 r6("01012001", "Neil", {value_type(12345678, 1, 100, 50, "10102010", 100000, "899960144354526")});
        } () );
    }
    SECTION("Методы realty")
    {
        value_type v0(12345678, 1, 100, 50, "10102010", 100000, "89996014435");
        realty r1("01012001", "Neil", {v0});
        value_type v1(12345679, 1, 100, 50, "10102010", 100000, "89996014435");

        r1._add_(v1);
        std::string s = "Контора: Neil\nДата создания: 01012001\n";
        s += " идентификационный номер : 12345678\n";
        s += " количество комнат : 1\n";
        s += " общая площадь : 100.000000\n";
        s += " жилая площадь : 50.000000\n";
        s += " дата постройки дома : 10102010\n";
        s += " запрашиваемая стоимость : 100000.000000\n";
        s += " телефон продавца : 89996014435\n\n";
        s += " идентификационный номер : 12345679\n";
        s += " количество комнат : 1\n";
        s += " общая площадь : 100.000000\n";
        s += " жилая площадь : 50.000000\n";
        s += " дата постройки дома : 10102010\n";
        s += " запрашиваемая стоимость : 100000.000000\n";
        s += " телефон продавца : 89996014435\n\n";

        CHECK(r1.toString() == s);

        r1._delete_(0);
        std::string s1 = "Контора: Neil\nДата создания: 01012001\n";
        s1 += " идентификационный номер : 12345679\n";
        s1 += " количество комнат : 1\n";
        s1 += " общая площадь : 100.000000\n";
        s1 += " жилая площадь : 50.000000\n";
        s1 += " дата постройки дома : 10102010\n";
        s1 += " запрашиваемая стоимость : 100000.000000\n";
        s1 += " телефон продавца : 89996014435\n\n";
        CHECK(r1.toString() == s1);

        r1._add_(v0);
        s1 += " идентификационный номер : 12345678\n";
        s1 += " количество комнат : 1\n";
        s1 += " общая площадь : 100.000000\n";
        s1 += " жилая площадь : 50.000000\n";
        s1 += " дата постройки дома : 10102010\n";
        s1 += " запрашиваемая стоимость : 100000.000000\n";
        s1 += " телефон продавца : 89996014435\n\n";
        CHECK(r1.toString() == s1);

        value_type v2(12345679, 1, 2000, 1000, "10102010", 50000, "89996033333");
        r1._change_(0, v2);
        CHECK_THROWS
        ( [&]() {
            r1._change_(1, v2);
        } () );
        CHECK_THROWS
        ( [&]() {
            r1._add_(v1);
        } () );
    }
    SECTION("генерация случайных realty")
    {
        realty zero;
        CHECK(zero.get_size() == 0);

        zero.rand();
        CHECK(zero.get_size() >= 1);

    }
    SECTION("Методы realty")
    {
        realty zero;
        zero.rand();

        int id = 12345678;
        int f = zero.find_id(id);
        if (f == -1)
        {
            f = zero.get_size()-1;
            zero._change_(f, value_type(id, 1, 100, 50, "10102010", 100000, "89996014435"));
        }

        CHECK(zero.find_id(id) == f);
        CHECK(zero.find_id(id) == zero.find_id_disordered(id));
        CHECK(zero.find_id(id) == zero.find_id_sordered(id));
        CHECK(zero.find_id(id) == zero.binary_search(id));
        CHECK(zero.find_id(id) == zero.interpolat_search(id));

        zero._clear();
        zero._add_(value_type(id, 1, 100, 53, "10102011", 100000, "89996014435"));
        zero._add_(value_type(id+1, 1, 101, 52, "10102012", 100000, "89996014435"));
        zero._add_(value_type(id+2, 1, 102, 51, "10102010", 100000, "89996014435"));
        zero._add_(value_type(id+3, 1, 103, 50, "10102013", 100000, "89996014435"));

        CHECK(zero.find_data("10102010") == array(1, value_type(id+2, 1, 102, 51, "10102010", 100000, "89996014435")));
        CHECK(zero.find_commonS(100) == array(1, value_type(id, 1, 100, 53, "10102011", 100000, "89996014435")));
        CHECK(zero.find_commonS_less(102) == array({value_type(id, 1, 100, 53, "10102011", 100000, "89996014435"), value_type(id+1, 1, 101, 52, "10102012", 100000, "89996014435")}));
        CHECK(zero.find_commonS_more(102) == array(1, value_type(id+3, 1, 103, 50, "10102013", 100000, "89996014435")));
        CHECK(zero.find_livingS(50) == array(1, value_type(id+3, 1, 103, 50, "10102013", 100000, "89996014435")));
        CHECK(zero.find_livingS_less(52) == array({value_type(id+2, 1, 102, 51, "10102010", 100000, "89996014435"), value_type(id+3, 1, 103, 50, "10102013", 100000, "89996014435")}));
        CHECK(zero.find_livingS_more(52) == array(1, value_type(id, 1, 100, 53, "10102011", 100000, "89996014435")));
    }
}


TEST_CASE("Проверка работы методов класса realty2", "[realty2]")
{
    // -- тестовые методы --
    SECTION("Тестироавние инициализации класса realty2")
    {
        realty2 zero;
        CHECK(zero.toString() == "Контора: \nДата создания: \nНет Информации");

        std::string s = "Контора: Neil\nДата создания: 01012001\n";
        s += " идентификационный номер : 12345678\n";
        s += " количество комнат : 1\n";
        s += " общая площадь : 100.000000\n";
        s += " жилая площадь : 50.000000\n";
        s += " дата постройки дома : 10102010\n";
        s += " запрашиваемая стоимость : 100000.000000\n";
        s += " телефон продавца : 89996014435\n\n";

        realty2 r1("01012001", "Neil", {value_type(12345678, 1, 100, 50, "10102010", 100000, "89996014435")});
        CHECK(r1.toString() == s);

        vec a {value_type(12345678, 1, 100, 50, "10102010", 100000, "89996014435")};
        realty2 r2("01012001", "Neil", a);
        CHECK(r2.toString() == s);

        CHECK_THROWS
        ( [&]() {
            realty2 r3("010120015640", "Neil", {value_type(12345678, 1, 100, 50, "10102010", 100000, "89996014435")});
        } () );
        CHECK_THROWS
        ( [&]() {
            realty2 r4("01012001", "Neil", {value_type(123456789, 1, 100, 50, "10102010", 100000, "89996014435")});
        } () );
        CHECK_THROWS
        ( [&]() {
            realty2 r5("01012001", "Neil", {value_type(12345678, 1, 100, 50, "10102010045", 100000, "89996014435")});
        } () );
        CHECK_THROWS
        ( [&]() {
            realty2 r6("01012001", "Neil", {value_type(12345678, 1, 100, 50, "10102010", 100000, "899960144354526")});
        } () );
    }
    SECTION("Методы realty2")
    {
        value_type v0(12345678, 1, 100, 50, "10102010", 100000, "89996014435");
        realty2 r1("01012001", "Neil", {v0});
        value_type v1(12345679, 1, 100, 50, "10102010", 100000, "89996014435");

        r1._add_(v1);
        std::string s = "Контора: Neil\nДата создания: 01012001\n";
        s += " идентификационный номер : 12345678\n";
        s += " количество комнат : 1\n";
        s += " общая площадь : 100.000000\n";
        s += " жилая площадь : 50.000000\n";
        s += " дата постройки дома : 10102010\n";
        s += " запрашиваемая стоимость : 100000.000000\n";
        s += " телефон продавца : 89996014435\n\n";
        s += " идентификационный номер : 12345679\n";
        s += " количество комнат : 1\n";
        s += " общая площадь : 100.000000\n";
        s += " жилая площадь : 50.000000\n";
        s += " дата постройки дома : 10102010\n";
        s += " запрашиваемая стоимость : 100000.000000\n";
        s += " телефон продавца : 89996014435\n\n";

        CHECK(r1.toString() == s);

        r1._delete_(0);
        std::string s1 = "Контора: Neil\nДата создания: 01012001\n";
        s1 += " идентификационный номер : 12345679\n";
        s1 += " количество комнат : 1\n";
        s1 += " общая площадь : 100.000000\n";
        s1 += " жилая площадь : 50.000000\n";
        s1 += " дата постройки дома : 10102010\n";
        s1 += " запрашиваемая стоимость : 100000.000000\n";
        s1 += " телефон продавца : 89996014435\n\n";
        CHECK(r1.toString() == s1);

        r1._add_(v0);
        s1 += " идентификационный номер : 12345678\n";
        s1 += " количество комнат : 1\n";
        s1 += " общая площадь : 100.000000\n";
        s1 += " жилая площадь : 50.000000\n";
        s1 += " дата постройки дома : 10102010\n";
        s1 += " запрашиваемая стоимость : 100000.000000\n";
        s1 += " телефон продавца : 89996014435\n\n";
        CHECK(r1.toString() == s1);

        value_type v2(12345679, 1, 2000, 1000, "10102010", 50000, "89996033333");
        r1._change_(0, v2);
        CHECK_THROWS
        ( [&]() {
            r1._change_(1, v2);
        } () );
        CHECK_THROWS
        ( [&]() {
            r1._add_(v1);
        } () );
    }
    SECTION("генерация случайных realty2")
    {
        realty zero;
        CHECK(zero.get_size() == 0);

        zero.rand();
        CHECK(zero.get_size() >= 1);

    }
    SECTION("Методы realty2")
    {
        realty2 zero;
        zero.rand();

        int id = 12345678;
        int f = zero.find_id(id);
        if (f == -1)
        {
            f = zero.get_size()-1;
            zero._change_(f, value_type(id, 1, 100, 50, "10102010", 100000, "89996014435"));
        }
        CHECK(zero.find_id(id) == f);
        CHECK(zero.find_id(id) == zero.find_id_disordered(id));
        CHECK(zero.find_id(id) == zero.find_id_sordered(id));
        CHECK(zero.find_id(id) == zero.binary_search(id));
        CHECK(zero.find_id(id) == zero.interpolat_search(id));

        zero._clear();
        zero._add_(value_type(id, 1, 100, 53, "10102011", 100000, "89996014435"));
        zero._add_(value_type(id+1, 1, 101, 52, "10102012", 100000, "89996014435"));
        zero._add_(value_type(id+2, 1, 102, 51, "10102010", 100000, "89996014435"));
        zero._add_(value_type(id+3, 1, 103, 50, "10102013", 100000, "89996014435"));

        CHECK(zero.find_data("10102010") == vec(1, value_type(id+2, 1, 102, 51, "10102010", 100000, "89996014435")));
        CHECK(zero.find_commonS(100) == vec(1, value_type(id, 1, 100, 53, "10102011", 100000, "89996014435")));
        CHECK(zero.find_commonS_less(102) == vec({value_type(id, 1, 100, 53, "10102011", 100000, "89996014435"), value_type(id+1, 1, 101, 52, "10102012", 100000, "89996014435")}));
        CHECK(zero.find_commonS_more(102) == vec(1, value_type(id+3, 1, 103, 50, "10102013", 100000, "89996014435")));
        CHECK(zero.find_livingS(50) == vec(1, value_type(id+3, 1, 103, 50, "10102013", 100000, "89996014435")));
        CHECK(zero.find_livingS_less(52) == vec({value_type(id+2, 1, 102, 51, "10102010", 100000, "89996014435"), value_type(id+3, 1, 103, 50, "10102013", 100000, "89996014435")}));
        CHECK(zero.find_livingS_more(52) == vec(1, value_type(id, 1, 100, 53, "10102011", 100000, "89996014435")));
    }
}
