?. – оператор безопасного вызова
    Он проверят, что значение слева от него не равно null. Если же оно равно null, то ничего не происходит. Точнее, все выражение возвращает null.
    Поскольку выражение с оператором безопасного вызова метода потенциально может вернуть null, то значение всего выражения с этим оператором всегда будет принадлежать какому-либо nullable-типу.

?: – оператор "элвис"
    val b: String? = readLine()
    val c: String = b ?: ""
    // если b = null, то c будет равно значению справа.

!! – утверждение "это не null"

? после переменной - может быть null (не использоваться).
    Но после таких переменных и нужно ставить везде !!, что бы объяснять, что они уже не null
    Так же стоит понимать, что тип без ? и с ним воспринимаютсся как разные типы



println("acd" > "abcd") // выведет true - a b C d (C дальше b)

val nums: Array<Int> = Array(10) { it+1 } // it - заполняется индексами самого массива
                                        // +1, увеличивает все значения
it: неявное имя одного параметра
Очень часто лямбда-выражение имеет только один параметр.
    Если компилятор может проанализировать подпись без каких-либо параметров, параметр не
нужно объявлять, и его ->можно не указывать. Параметр будет неявно объявлен под
именем it:
ints.filter { it > 0 } // this literal is of type '(it: Int) -> Boolean'


 === (обе переменные ссылаются на один объект),
 !== (обе переменные ссылаются на разные объекты)
Логические операторы: && – И, || – ИЛИ, ! – НЕ.
Также есть словесные and, or, xor, при использовании которых операнды надо брать в скобки.

